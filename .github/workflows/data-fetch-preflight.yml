name: SBM — Data Fetch & Preflight

on:
  workflow_dispatch:
  schedule:
    - cron: "5 */6 * * *"   # every 6 hours

concurrency:
  group: sbm-data-preflight
  cancel-in-progress: false

permissions:
  contents: write   # needed only if you enable the optional auto-commit of HISTORY_LOG.csv

jobs:
  fetch-and-preflight:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PYTHONUNBUFFERED: "1"
      # Optional global halt (dry-run) for staking:
      # RISK_HALT: "1"

      # FBref config via repo Variables (read by the streamlined fetcher)
      FBREF_LEAGUE: ${{ vars.FBREF_LEAGUE }}                # e.g., "ENG-Premier League"
      FBREF_SEASONS: ${{ vars.FBREF_SEASONS }}              # e.g., "2022-2023,2023-2024,2024-2025"
      FBREF_SLICES: ${{ vars.FBREF_SLICES }}                # e.g., "standard,shooting,passing,keepers,goal_shot_creation,misc"

      # API-FOOTBALL league ids (optional; comma-separated) e.g., "39,140,135"
      API_FOOTBALL_LEAGUE_IDS: ${{ vars.API_FOOTBALL_LEAGUE_IDS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'audit/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache soccerdata (provider cache)
        uses: actions/cache@v4
        with:
          path: .cache/soccerdata
          key: ${{ runner.os }}-soccerdata-${{ env.FBREF_LEAGUE }}-${{ env.FBREF_SEASONS }}
          restore-keys: |
            ${{ runner.os }}-soccerdata-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
          if [ -f "audit/requirements.txt" ]; then pip install -r audit/requirements.txt; fi
          mkdir -p data reports .cache/soccerdata

      # ---------------- FETCHERS ----------------

      - name: Fetch SPI (robust; ci_width)
        run: python connectors/spi_fetch.py

      - name: Fetch FBref slices → data/fbref_slice_*.csv (retry)
        run: |
          set -e
          for i in 1 2 3; do
            echo "FBref slice fetch attempt $i..."
            python connectors/fbref_fetch_streamlined.py && break
            echo "FBref slice fetch attempt $i failed; sleeping before retry..."
            sleep $((15 * i))
          done

      - name: Fetch Odds + Fixtures (H2H + OU + BTTS + Spreads; two-key fallback)
        env:
          THE_ODDS_API_KEY: ${{ secrets.THE_ODDS_API_KEY }}
          THE_ODDS_API_KEY_BACKUP: ${{ secrets.THE_ODDS_API_KEY_BACKUP }}
        run: python connectors/multi_odds_fetch.py

      - name: Attach API-FOOTBALL IDs to fixtures
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          API_FOOTBALL_LEAGUE_IDS: ${{ env.API_FOOTBALL_LEAGUE_IDS }}
        run: python connectors/api_football_attach_ids.py

      - name: Fetch lineups (availability + experienced starters %)
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: python connectors/lineups_fetch.py

      # --------------- PRIORS + ENRICH ---------------

      - name: Build cards/corners priors
        run: python scripts/ref_cards_corners_build.py

      - name: Audit team/league mappings
        run: python scripts/mapping_audit.py

      - name: Enrich features (per-slice FBref + line moves)
        run: python scripts/enrich_features.py

      - name: Build schedule features (rest & density)
        run: python scripts/hist_schedule_features.py

      - name: Build rolling form (exp-decay)
        run: python scripts/rolling_form_exp_decay.py

      # --------------- MINI-PRIOR MODELS ---------------

      - name: Build xG prior (sim)
        run: python scripts/priors_xg_sim.py

      - name: Build availability prior
        run: python scripts/priors_availability.py

      - name: Build set-piece prior
        run: python scripts/priors_setpieces.py

      - name: Build market-move prior
        run: python scripts/priors_market_move.py

      - name: Build uncertainty prior
        run: python scripts/priors_uncertainty.py

      # --------------- FEATURES + RISK ---------------

      - name: Build feature diffs & coherence features
        run: python scripts/feature_patcher.py

      - name: Build extended consistency checks
        run: python scripts/consistency_checks_build.py

      - name: Update Kelly stakes by risk policy (liquidity tiers + caps)
        run: python scripts/kelly_policy_update.py

      - name: Log vetoed fixtures (WHY_NOT_BET)
        run: python scripts/why_not_bet.py

      - name: WHY_NOT_BET summary (grouped reasons)
        run: python scripts/why_not_bet_summary.py

      # --------------- HISTORY LOGGER ---------------

      - name: Append history log (run-time audit)
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
        run: python scripts/history_logger.py

      # --------------- MODEL MATRIX ---------------

      - name: Build model-ready matrix
        run: python scripts/model_matrix_build.py

      - name: Validate model matrix schema
        run: python scripts/model_matrix_validate.py

      - name: Build calibration report
        run: python scripts/calibration_report_build.py

      # --------------- OPTIONAL TRAINERS ---------------

      - name: Train minimal model (rolling CV + per-league isotonic)
        run: python scripts/trainer_minimal.py

      - name: Train stack (base + priors + contradictions)
        run: python scripts/stack_trainer.py

      - name: Build feature-importance report
        run: python scripts/feature_importance_report.py

      # --------------- BLANK FILE GUARD ---------------

      - name: Guard against blank artifacts
        env:
          BLANK_FAIL_CRITICAL: "0"   # set to "1" to hard-fail on critical blanks
        run: python scripts/blank_file_guard.py

      # --------------- BRIEFING / SLOs / SANITY / FORWARD LOOK ---------------

      - name: Append source alerts to AUTO_BRIEFING.md
        run: |
          mkdir -p reports
          if [ ! -f reports/AUTO_BRIEFING.md ] ; then echo "# AUTO BRIEFING" > reports/AUTO_BRIEFING.md ; fi
          python scripts/alerts_autobriefing_append.py
          {
            echo "";
            echo "## Odds Key Usage";
            if [ -f reports/ODDS_ALERTS.md ]; then
              echo "";
              echo "**From ODDS_ALERTS.md:**";
              cat reports/ODDS_ALERTS.md;
            else
              echo "- No ODDS_ALERTS.md found this run.";
            fi
            echo "";
          } >> reports/AUTO_BRIEFING.md

      - name: Append SLOs to briefing
        run: python scripts/preflight_slo_append.py

      - name: Post-run sanity summary
        run: python scripts/post_run_sanity.py

      - name: Forward coverage & gaps
        run: python scripts/forward_coverage_report.py

      # --------------- OPTIONAL: COMMIT HISTORY TO REPO ---------------
      # - name: Commit updated HISTORY_LOG.csv to repo
      #   if: always()
      #   run: |
      #     git config user.name "github-actions"
      #     git config user.email "actions@github.com"
      #     git add data/HISTORY_LOG.csv
      #     git commit -m "Append HISTORY_LOG.csv [CI] (run ${{ github.run_id }})" || echo "No changes to commit."
      #     git push

      # --------------- ARTIFACTS ---------------
      - name: Upload data & reports
        uses: actions/upload-artifact@v4
        with:
          name: sbm-preflight-artifacts
          path: |
            data/*.csv
            reports/*.md
            reports/*.csv
            reports/*.json
          # retention-days: 90