name: SBM — Connectors Smoke & Discovery

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONUNBUFFERED: "1"

      # ----- Force-only Must-Have 9 for the *smoke* checks -----
      CORE_LEAGUE_IDS: ${{ vars.CORE_LEAGUE_IDS }}  # 2,3,39,140,135,78,61,253,71

      # ----- Discovery controls (broad; used to harvest season metadata) -----
      API_FOOTBALL_DISCOVER_TYPE: "all"     # include leagues + cups
      MAX_DISCOVERED_LEAGUES: "1000"        # broad discovery OK; we lock smoke to CORE ids

      # ----- Wide-horizon smoke knobs (safe caps) -----
      # API-Football
      AF_FIXTURES_LOOKAHEAD_DAYS: "120"
      AF_SMOKE_MAX_LEAGUES: "500"
      AF_SMOKE_MAX_FIXTURES: "5000"
      AF_FALLBACK_NEXT: "300"               # fallback: ask next N fixtures when window returns 0
      AF_SMOKE_SLEEP_SEC: "6"               # respect 10 calls/min

      # Football-Data.org
      FDORG_LOOKAHEAD_DAYS: "120"
      FDORG_LOOKBACK_DAYS: "120"
      FDORG_SMOKE_MAX_MATCHES: "5000"

      # Diagnoser sample size
      LEAGUE_CHECK_SAMPLE: "10"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          mkdir -p data reports

      # Ensure repo root importable (connectors/, scripts/)
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      # Map both teams' secret names -> canonical envs & print SET/NOT SET
      - name: Set env (common) & presence check
        env:
          APIFOOTBALL_KEY:       ${{ secrets.APIFOOTBALL_KEY }}
          API_FOOTBALL_KEY_S:    ${{ secrets.API_FOOTBALL_KEY }}
          FOOTBALLDATA_TOKEN:    ${{ secrets.FOOTBALLDATA_TOKEN }}
          FDORG_TOKEN_S:         ${{ secrets.FDORG_TOKEN }}
          THE_ODDS_API_KEY_S:    ${{ secrets.THE_ODDS_API_KEY }}
          ODDS_API_KEY_LEGACY:   ${{ secrets.ODDS_API_KEY }}
        run: |
          API_FOOTBALL_KEY="${API_FOOTBALL_KEY_S:-$APIFOOTBALL_KEY}"
          FDORG_TOKEN="${FDORG_TOKEN_S:-$FOOTBALLDATA_TOKEN}"
          THE_ODDS_API_KEY="${THE_ODDS_API_KEY_S:-$ODDS_API_KEY_LEGACY}"

          echo "API_FOOTBALL_KEY=${API_FOOTBALL_KEY}" >> $GITHUB_ENV
          echo "FDORG_TOKEN=${FDORG_TOKEN}"           >> $GITHUB_ENV
          echo "THE_ODDS_API_KEY=${THE_ODDS_API_KEY}" >> $GITHUB_ENV

          test -n "${API_FOOTBALL_KEY}" && echo "API_FOOTBALL_KEY: SET" || echo "API_FOOTBALL_KEY: NOT SET"
          test -n "${FDORG_TOKEN}"      && echo "FDORG_TOKEN: SET"      || echo "FDORG_TOKEN: NOT SET"
          test -n "${THE_ODDS_API_KEY}" && echo "THE_ODDS_API_KEY: SET" || echo "THE_ODDS_API_KEY: NOT SET"

      # Fail fast if required envs missing (smoke context)
      - name: Secret guard (smoke)
        run: python scripts/secret_guard.py --context=smoke

      - name: Generate FBR API key (ephemeral)
        run: python scripts/fbr_generate_api_key.py

      # Broad discovery to harvest per-league current seasons
      - name: Discover leagues (API-Football)
        run: python connectors/api_football_discover_leagues.py

      # Lock smoke to CORE ids (Must-Have 9)
      - name: Lock API_FOOTBALL_LEAGUE_IDS to CORE ids
        run: |
          echo "API_FOOTBALL_LEAGUE_IDS=${CORE_LEAGUE_IDS}" >> $GITHUB_ENV
          echo "Locked API_FOOTBALL_LEAGUE_IDS=${CORE_LEAGUE_IDS}"

      # Show discovery outcome + season mapping
      - name: Show discovered leagues, seasons & locked IDs
        run: |
          echo "---- discovered_leagues.csv (first 15 lines) ----"
          if [ -f data/discovered_leagues.csv ]; then
            wc -l data/discovered_leagues.csv || true
            sed -n '1,15p' data/discovered_leagues.csv || true
            echo "---- season mapping (league_id,season) ----"
            awk -F',' 'NR==1{for(i=1;i<=NF;i++){if($i=="league_id") lid=i; if($i=="season") sid=i}} NR>1 && lid>0 && sid>0{print $lid","$sid}' data/discovered_leagues.csv | head -n 10 || true
          else
            echo "(missing data/discovered_leagues.csv)"
          fi
          echo "---- Locked API_FOOTBALL_LEAGUE_IDS ----"
          echo "${API_FOOTBALL_LEAGUE_IDS}"

      - name: API-Football & FD.org smoke tests → CONNECTOR_HEALTH.md
        run: python scripts/connectors_health_probe.py

      - name: Diagnose connectors (HTTP statuses)
        run: python scripts/diagnose_connectors.py

      - name: Show discovery & health
        run: |
          echo "---- LEAGUE_DISCOVERY.md ----"
          [ -f reports/LEAGUE_DISCOVERY.md ] && sed -n '1,120p' reports/LEAGUE_DISCOVERY.md || echo "(missing)"
          echo "---- CONNECTOR_HEALTH.md ----"
          [ -f reports/CONNECTOR_HEALTH.md ] && sed -n '1,120p' reports/CONNECTOR_HEALTH.md || echo "(missing)"
          echo "---- CONNECTOR_DIAG.md ----"
          [ -f reports/CONNECTOR_DIAG.md ] && sed -n '1,200p' reports/CONNECTOR_DIAG.md || echo "(missing)"

      - name: Assert connectors healthy
        run: python scripts/sanity_assert.py --mode=connectors

      # ALWAYS upload artifacts even on failure
      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbm-smoke-artifacts
          path: |
            data/discovered_leagues.csv
            reports/LEAGUE_DISCOVERY.md
            reports/CONNECTOR_HEALTH.md
            reports/CONNECTOR_DIAG.md